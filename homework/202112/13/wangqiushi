## B-trees
关系数据库中的标准索引实现， 许多非关系型数据库也经常使用。保留按键排序的key-value对，这样可以实现高效的key-value查找和区间查询。
大多数数据库可以适合3~4层的B-tree, 不需遍历非常深的页面层次即可找到所需的页.

## 优化B-tree
·写时复制方案，修改的页被写入不同的位置，树中父页的新版本被创建，并指向新的位置。
·保存键的缩略信息， 而不是完整的键， 这样可以节省页空间。
·对树进行布局，以便相邻叶子页可按顺序保存在磁盘上。
·添加额外的指针到树中。
·分形树借鉴了一些日志结构的想法来减少磁盘寻道

## 对比B-tree和LSM-tree
LSM-tree通常对于写入更快，而B-tree被认为对于读取更快。
读取通常在LSM-tree上较慢，因为必须在不同的压缩阶段检查不同的数据结构和SSTable。

LSM-tree的优点：通常能够承受比B-tree更高的写入吞吐量，可以支持更好地压缩。
缺点：压缩过程有时会干扰正在进行的读写操作。

磁盘的有限写入带宽需要在初始写入（记录并刷新内存表到磁盘）和后台运行的压缩线程之间所共享。写入空数据库时，全部的磁盘带宽可用于初始写入，但数据库的数据量越大，压缩所需的磁盘带宽越多。如果写入吞吐量很高并且压缩没有仔细配置， 那么就会发生压缩无法匹配新数据写入速率的情况。

其他索引结构
在索引中存储值，可能是上述的实际行（文档， 顶点）， 也可以是对其他地方存储的行的引用。
聚集索引（在索引中直接保存行数据）    
非聚集索引（仅存储索引中的数据的引用）
覆盖索引
聚集和覆盖索引可以加快读取速度， 但是它们需要额外的存储， 并且会增加写入的开销

多列索引：级联索引通过将一列追加到另一列，将几个字段简单地组合成一个键（索引的定义指定字段连接的顺序）

多维索引是更普遍的一次查询多列的方法。

全文搜索和模糊索引

## 事务处理与分析处理
事务不一定具有ACID (原子性、一致性、隔离性和持久性）属性。事务处理只是意味着允许客户端进行低延迟读取和写入，相比千只能周期性地运行（如每天一次）的批处理作业。
OLTP和OLAP
