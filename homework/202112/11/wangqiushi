P71-80
数据存储
日志结构的存储引擎和面向页的存储引擎。
日志：仅能追加的记录序列集合。
适当的索引可以加速读取查询， 但每个索引都会减慢写速度。
数据库通常不会对所有内容进行索引， 为应用程序提供最有利加速的同时， 避免引入过多不必要的开销。

哈希表索引：局限性：哈希表必须全部放入内存，很难使磁盘上的hashmap表现良好。需要大量访问I/O。区间查询效率不高。

SSTables
要求key-value对的顺序按键排序，排序字符串表。
SSTable相比哈希索引的日志段：
合并段更加简单高效，在文件中查找特定的键时，不需要在内存中保存所有键的索引。由于读请求往往需要扫描请求范围内的多个key-value对， 可以考虑将这些记录保存到一个块中并在写磁盘之前将其压缩。然后稀疏内存索引的每个条目指向压缩块的开头。除了节省磁盘空间， 压缩还减少了I/O带宽的占用。

构建和维护SSTables:
存储引擎工作流程：
1.写入时， 将其添加到内存中的平衡树数据结构
2.当内存表大千某个阑值（通常为几兆字节）时， 将其作为SSTable文件写入磁
盘。
3.在内存表中查找键， 最新的磁盘段文件， 次新的磁盘段文件，直到找到目标。
4.后台执行段合并与压缩过程，合并多个段文件，丢弃已被覆盖或删除的值。
