Google文件系统

设计目标:性能、可扩展性、可靠性以及可用性。

绝大部分文件的修改是采用在文件尾部追加数据，而不是覆盖原有数据的方式(待深入研究)，并且追加操作是原子性，从而保证多个客户端能够同时进行追加操作

系统必须持续监控自身的状态，它必须将组件失效作为一种常态，能够迅速地侦测、冗余并恢复失效的组件。（可用性？）

工作负载主要由两种读操作组成：大规模的流式读取和小规模的随机读取。
其中性能非常关注，通常的做法是把小规模的随机读取操作合并、排序，之后按顺序批量读取，这样就避免了在文件中前后来回的移动读取位置。

GFS提供了快照和追加操作。
快照是创建一个文件或者目录树的拷贝。追加操作同上。

明确架构和一致性模型（重点，需要深入学习）
单Master，多Chunk
一致性：所有客户端，无论从哪个副本读取，读到的数据都一样；修改之后，客户端能够看到写入操作全部的内容
